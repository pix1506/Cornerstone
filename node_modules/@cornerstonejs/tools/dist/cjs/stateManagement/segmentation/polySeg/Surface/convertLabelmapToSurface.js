"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertLabelmapToSurface = void 0;
const core_1 = require("@cornerstonejs/core");
const core_2 = require("@cornerstonejs/core");
const convertStackToVolumeSegmentation_1 = require("../../convertStackToVolumeSegmentation");
const enums_1 = require("../../../../enums");
const workerManager = (0, core_2.getWebWorkerManager)();
const triggerWorkerProgress = (eventTarget, progress) => {
    (0, core_1.triggerEvent)(eventTarget, core_1.Enums.Events.WEB_WORKER_PROGRESS, {
        progress,
        type: enums_1.WorkerTypes.POLYSEG_LABELMAP_TO_SURFACE,
    });
};
function convertLabelmapToSurface(labelmapRepresentationData, segmentIndex, isVolume = true) {
    return __awaiter(this, void 0, void 0, function* () {
        let volumeId;
        if (isVolume) {
            volumeId = labelmapRepresentationData
                .volumeId;
        }
        else {
            const { imageIdReferenceMap } = labelmapRepresentationData;
            ({ volumeId } = yield (0, convertStackToVolumeSegmentation_1.computeVolumeSegmentationFromStack)({
                imageIdReferenceMap,
            }));
        }
        const volume = core_1.cache.getVolume(volumeId);
        const scalarData = volume.getScalarData();
        const { dimensions, spacing, origin, direction } = volume;
        triggerWorkerProgress(core_1.eventTarget, 0);
        const results = yield workerManager.executeTask('polySeg', 'convertLabelmapToSurface', {
            scalarData,
            dimensions,
            spacing,
            origin,
            direction,
            segmentIndex,
        }, {
            callbacks: [
                (progress) => {
                    triggerWorkerProgress(core_1.eventTarget, progress);
                },
            ],
        });
        triggerWorkerProgress(core_1.eventTarget, 1);
        return results;
    });
}
exports.convertLabelmapToSurface = convertLabelmapToSurface;
//# sourceMappingURL=convertLabelmapToSurface.js.map