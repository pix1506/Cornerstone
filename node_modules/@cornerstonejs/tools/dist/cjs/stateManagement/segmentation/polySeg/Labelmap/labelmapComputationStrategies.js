"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.computeLabelmapFromContourSegmentation = exports.computeLabelmapData = void 0;
const core_1 = require("@cornerstonejs/core");
const segmentation_1 = require("../../../../utilities/segmentation");
const segmentationState_1 = require("../../segmentationState");
const convertContourToLabelmap_1 = require("./convertContourToLabelmap");
const convertSurfaceToLabelmap_1 = require("./convertSurfaceToLabelmap");
const convertVolumeToStackSegmentation_1 = require("../../convertVolumeToStackSegmentation");
function computeLabelmapData(segmentationId, options = {}) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const segmentIndices = ((_a = options.segmentIndices) === null || _a === void 0 ? void 0 : _a.length)
            ? options.segmentIndices
            : (0, segmentation_1.getUniqueSegmentIndices)(segmentationId);
        let rawLabelmapData;
        const segmentation = (0, segmentationState_1.getSegmentation)(segmentationId);
        const representationData = segmentation.representationData;
        try {
            if (representationData.CONTOUR) {
                rawLabelmapData = yield computeLabelmapFromContourSegmentation(segmentationId, Object.assign({ segmentIndices }, options));
            }
            else if (representationData.SURFACE) {
                rawLabelmapData = yield computeLabelmapFromSurfaceSegmentation(segmentation.segmentationId, Object.assign({ segmentIndices }, options));
            }
        }
        catch (error) {
            console.error(error);
            throw error;
        }
        if (!rawLabelmapData) {
            throw new Error('Not enough data to convert to surface, currently only support converting volume labelmap to surface if available');
        }
        return rawLabelmapData;
    });
}
exports.computeLabelmapData = computeLabelmapData;
function computeLabelmapFromContourSegmentation(segmentationId, options = {}) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const isVolume = (_a = options.viewport instanceof core_1.VolumeViewport) !== null && _a !== void 0 ? _a : true;
        if (isVolume && !options.viewport) {
            throw new Error('Cannot compute labelmap from contour segmentation without providing the viewport');
        }
        const segmentIndices = ((_b = options.segmentIndices) === null || _b === void 0 ? void 0 : _b.length)
            ? options.segmentIndices
            : (0, segmentation_1.getUniqueSegmentIndices)(segmentationId);
        const segmentation = (0, segmentationState_1.getSegmentation)(segmentationId);
        const representationData = segmentation.representationData.CONTOUR;
        const convertFunction = isVolume
            ? convertContourToLabelmap_1.convertContourToVolumeLabelmap
            : convertContourToLabelmap_1.convertContourToStackLabelmap;
        const result = yield convertFunction(representationData, {
            segmentIndices,
            segmentationRepresentationUID: options.segmentationRepresentationUID,
            viewport: options.viewport,
        });
        return result;
    });
}
exports.computeLabelmapFromContourSegmentation = computeLabelmapFromContourSegmentation;
function computeLabelmapFromSurfaceSegmentation(segmentationId, options = {}) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const isVolume = (_a = options.viewport instanceof core_1.VolumeViewport) !== null && _a !== void 0 ? _a : true;
        const segmentIndices = ((_b = options.segmentIndices) === null || _b === void 0 ? void 0 : _b.length)
            ? options.segmentIndices
            : (0, segmentation_1.getUniqueSegmentIndices)(segmentationId);
        const segmentation = (0, segmentationState_1.getSegmentation)(segmentationId);
        const segmentsGeometryIds = new Map();
        const representationData = segmentation.representationData.SURFACE;
        representationData.geometryIds.forEach((geometryId, segmentIndex) => {
            if (segmentIndices.includes(segmentIndex)) {
                segmentsGeometryIds.set(segmentIndex, geometryId);
            }
        });
        if (isVolume && !options.viewport) {
            throw new Error('Cannot compute labelmap from surface segmentation without providing the viewport');
        }
        let segmentationVolume;
        if (isVolume) {
            const defaultActor = options.viewport.getDefaultActor();
            const { uid: volumeId } = defaultActor;
            segmentationVolume =
                yield core_1.volumeLoader.createAndCacheDerivedSegmentationVolume(volumeId);
        }
        else {
            const imageIds = options.viewport.getImageIds();
            const volumeId = 'generatedSegmentationVolumeId';
            const volumeProps = core_1.utilities.generateVolumePropsFromImageIds(imageIds, volumeId);
            delete volumeProps.imageIds;
            segmentationVolume = yield core_1.volumeLoader.createLocalSegmentationVolume(Object.assign(Object.assign({}, volumeProps), { scalarData: volumeProps.scalarData, referencedImageIds: imageIds }), volumeId);
        }
        const result = yield (0, convertSurfaceToLabelmap_1.convertSurfaceToVolumeLabelmap)({ geometryIds: segmentsGeometryIds }, segmentationVolume);
        if (isVolume) {
            return result;
        }
        const stackData = (yield (0, convertVolumeToStackSegmentation_1.computeStackSegmentationFromVolume)({
            volumeId: segmentationVolume.volumeId,
        }));
        return stackData;
    });
}
//# sourceMappingURL=labelmapComputationStrategies.js.map