"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.computeSurfaceFromLabelmapSegmentation = exports.computeSurfaceFromContourSegmentation = exports.computeSurfaceData = void 0;
const segmentation_1 = require("../../../../utilities/segmentation");
const segmentationState_1 = require("../../segmentationState");
const convertContourToSurface_1 = require("./convertContourToSurface");
const createAndCacheSurfacesFromRaw_1 = require("./createAndCacheSurfacesFromRaw");
const stackVolumeCheck_1 = require("../../../../tools/segmentation/strategies/utils/stackVolumeCheck");
const convertLabelmapToSurface_1 = require("./convertLabelmapToSurface");
function computeSurfaceData(segmentationId, options = {}) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const segmentIndices = ((_a = options.segmentIndices) === null || _a === void 0 ? void 0 : _a.length)
            ? options.segmentIndices
            : (0, segmentation_1.getUniqueSegmentIndices)(segmentationId);
        let rawSurfacesData;
        const segmentation = (0, segmentationState_1.getSegmentation)(segmentationId);
        const representationData = segmentation.representationData;
        try {
            if (representationData.CONTOUR) {
                rawSurfacesData = yield computeSurfaceFromContourSegmentation(segmentationId, Object.assign({ segmentIndices }, options));
            }
            else if (representationData.LABELMAP) {
                rawSurfacesData = yield computeSurfaceFromLabelmapSegmentation(segmentation.segmentationId, Object.assign({ segmentIndices }, options));
            }
        }
        catch (error) {
            console.error(error);
            throw error;
        }
        if (!rawSurfacesData) {
            throw new Error('Not enough data to convert to surface, currently only support converting volume labelmap to surface if available');
        }
        const surfacesData = yield (0, createAndCacheSurfacesFromRaw_1.createAndCacheSurfacesFromRaw)(segmentationId, rawSurfacesData, options);
        return surfacesData;
    });
}
exports.computeSurfaceData = computeSurfaceData;
function computeSurfaceFromLabelmapSegmentation(segmentationId, options = {}) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const segmentation = (0, segmentationState_1.getSegmentation)(segmentationId);
        if (!((_a = segmentation === null || segmentation === void 0 ? void 0 : segmentation.representationData) === null || _a === void 0 ? void 0 : _a.LABELMAP)) {
            console.warn('Only support surface update from labelmaps');
            return;
        }
        const isVolume = (0, stackVolumeCheck_1.isVolumeSegmentation)(segmentation.representationData.LABELMAP);
        const labelmapRepresentationData = segmentation.representationData.LABELMAP;
        const segmentIndices = options.segmentIndices || (0, segmentation_1.getUniqueSegmentIndices)(segmentationId);
        const promises = segmentIndices.map((index) => {
            const surface = (0, convertLabelmapToSurface_1.convertLabelmapToSurface)(labelmapRepresentationData, index, isVolume);
            return surface;
        });
        const surfaces = yield Promise.allSettled(promises);
        const errors = surfaces.filter((p) => p.status === 'rejected');
        if (errors.length > 0) {
            console.error(errors);
            throw new Error('Failed to convert labelmap to surface');
        }
        const rawSurfacesData = surfaces
            .map((surface, index) => {
            if (surface.status === 'fulfilled') {
                return { segmentIndex: segmentIndices[index], data: surface.value };
            }
        })
            .filter(Boolean);
        return rawSurfacesData;
    });
}
exports.computeSurfaceFromLabelmapSegmentation = computeSurfaceFromLabelmapSegmentation;
function computeSurfaceFromContourSegmentation(segmentationId, options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const segmentation = (0, segmentationState_1.getSegmentation)(segmentationId);
        const contourRepresentationData = segmentation.representationData.CONTOUR;
        const segmentIndices = options.segmentIndices || (0, segmentation_1.getUniqueSegmentIndices)(segmentationId);
        const promises = segmentIndices.map((index) => __awaiter(this, void 0, void 0, function* () {
            const surface = yield (0, convertContourToSurface_1.convertContourToSurface)(contourRepresentationData, index);
            return { segmentIndex: index, data: surface };
        }));
        const surfaces = yield Promise.all(promises);
        return surfaces;
    });
}
exports.computeSurfaceFromContourSegmentation = computeSurfaceFromContourSegmentation;
//# sourceMappingURL=surfaceComputationStrategies.js.map