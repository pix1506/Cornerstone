"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@cornerstonejs/core");
const SegmentationState = __importStar(require("../../../stateManagement/segmentation/segmentationState"));
const ToolGroupManager_1 = require("../../../store/ToolGroupManager");
const onLabelmapSegmentationDataModified = function (evt) {
    const { segmentationId, modifiedSlicesToUse } = evt.detail;
    const { representationData, type } = SegmentationState.getSegmentation(segmentationId);
    const toolGroupIds = SegmentationState.getToolGroupIdsWithSegmentation(segmentationId);
    const labelmapRepresentationData = representationData[type];
    if ('volumeId' in labelmapRepresentationData) {
        performVolumeLabelmapUpdate({
            modifiedSlicesToUse,
            representationData,
            type,
        });
    }
    if ('imageIdReferenceMap' in labelmapRepresentationData) {
        performStackLabelmapUpdate({
            toolGroupIds,
            segmentationId,
            representationData,
            type,
        });
    }
};
function performVolumeLabelmapUpdate({ modifiedSlicesToUse, representationData, type, }) {
    const segmentationVolume = core_1.cache.getVolume(representationData[type].volumeId);
    if (!segmentationVolume) {
        console.warn('segmentation not found in cache');
        return;
    }
    const { imageData, vtkOpenGLTexture } = segmentationVolume;
    let slicesToUpdate;
    if (modifiedSlicesToUse && Array.isArray(modifiedSlicesToUse)) {
        slicesToUpdate = modifiedSlicesToUse;
    }
    else {
        const numSlices = imageData.getDimensions()[2];
        slicesToUpdate = [...Array(numSlices).keys()];
    }
    slicesToUpdate.forEach((i) => {
        vtkOpenGLTexture.setUpdatedFrame(i);
    });
    imageData.modified();
}
function performStackLabelmapUpdate({ toolGroupIds, segmentationId, representationData, type, }) {
    toolGroupIds.forEach((toolGroupId) => {
        const toolGroupSegmentationRepresentations = SegmentationState.getSegmentationRepresentations(toolGroupId);
        const toolGroup = (0, ToolGroupManager_1.getToolGroup)(toolGroupId);
        const viewportsInfo = toolGroup.getViewportsInfo();
        toolGroupSegmentationRepresentations.forEach((representation) => {
            if (representation.segmentationId !== segmentationId) {
                return;
            }
            viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {
                const viewport = (0, core_1.getEnabledElementByIds)(viewportId, renderingEngineId).viewport;
                if (viewport instanceof core_1.VolumeViewport) {
                    return;
                }
                const actorEntry = viewport.getActor(representation.segmentationRepresentationUID);
                if (!actorEntry) {
                    return;
                }
                const currentImageId = viewport.getCurrentImageId();
                const segImageData = actorEntry.actor.getMapper().getInputData();
                const { imageIdReferenceMap } = representationData[type];
                const currentSegmentationImageId = imageIdReferenceMap.get(currentImageId);
                const segmentationImage = core_1.cache.getImage(currentSegmentationImageId);
                segImageData.modified();
                core_1.utilities.updateVTKImageDataWithCornerstoneImage(segImageData, segmentationImage);
            });
        });
    });
}
exports.default = onLabelmapSegmentationDataModified;
//# sourceMappingURL=onLabelmapSegmentationDataModified.js.map