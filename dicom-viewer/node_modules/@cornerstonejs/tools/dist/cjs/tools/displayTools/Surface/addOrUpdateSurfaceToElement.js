"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@cornerstonejs/core");
const Mapper_1 = __importDefault(require("@kitware/vtk.js/Rendering/Core/Mapper"));
const Actor_1 = __importDefault(require("@kitware/vtk.js/Rendering/Core/Actor"));
const PolyData_1 = __importDefault(require("@kitware/vtk.js/Common/DataModel/PolyData"));
const CellArray_1 = __importDefault(require("@kitware/vtk.js/Common/Core/CellArray"));
const clipAndCacheSurfacesForViewport_1 = require("../../../stateManagement/segmentation/helpers/clipAndCacheSurfacesForViewport");
function addOrUpdateSurfaceToElement(element, surface, segmentationRepresentationUID) {
    var _a;
    const actorUID = (0, clipAndCacheSurfacesForViewport_1.getSurfaceActorUID)(segmentationRepresentationUID, surface.id);
    const enabledElement = (0, core_1.getEnabledElement)(element);
    const { viewport } = enabledElement;
    const surfaceActor = (_a = viewport.getActor(actorUID)) === null || _a === void 0 ? void 0 : _a.actor;
    if (surfaceActor) {
        const surfaceMapper = surfaceActor.getMapper();
        const currentPolyData = surfaceMapper.getInputData();
        const newPoints = surface.getPoints();
        const newPolys = surface.getPolys();
        const currentPoints = currentPolyData.getPoints().getData();
        const currentPolys = currentPolyData.getPolys().getData();
        if (newPoints.length === currentPoints.length &&
            newPolys.length === currentPolys.length) {
            return;
        }
        const polyData = PolyData_1.default.newInstance();
        polyData.getPoints().setData(newPoints, 3);
        const triangles = CellArray_1.default.newInstance({
            values: Float32Array.from(newPolys),
        });
        polyData.setPolys(triangles);
        surfaceMapper.setInputData(polyData);
        surfaceMapper.modified();
        setTimeout(() => {
            viewport.getRenderer().resetCameraClippingRange();
        }, 0);
        return;
    }
    const points = surface.getPoints();
    const polys = surface.getPolys();
    const color = surface.getColor();
    const surfacePolyData = PolyData_1.default.newInstance();
    surfacePolyData.getPoints().setData(points, 3);
    const triangles = CellArray_1.default.newInstance({
        values: Float32Array.from(polys),
    });
    surfacePolyData.setPolys(triangles);
    const mapper = Mapper_1.default.newInstance({});
    let clippingFilter;
    mapper.setInputData(surfacePolyData);
    const actor = Actor_1.default.newInstance();
    actor.setMapper(mapper);
    actor.getProperty().setColor(color[0] / 255, color[1] / 255, color[2] / 255);
    actor.getProperty().setLineWidth(2);
    viewport.addActor({
        actor: actor,
        uid: actorUID,
        clippingFilter,
    });
    viewport.resetCamera();
    viewport.render();
    setTimeout(() => {
        viewport.getRenderer().resetCameraClippingRange();
    }, 0);
}
exports.default = addOrUpdateSurfaceToElement;
//# sourceMappingURL=addOrUpdateSurfaceToElement.js.map