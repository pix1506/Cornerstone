"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.distancePointToContour = void 0;
const math_1 = require("../utilities/math");
const distancePointToContour = (viewport, annotation, coords) => {
    var _a, _b, _c;
    if (!((_c = (_b = (_a = annotation === null || annotation === void 0 ? void 0 : annotation.data) === null || _a === void 0 ? void 0 : _a.contour) === null || _b === void 0 ? void 0 : _b.polyline) === null || _c === void 0 ? void 0 : _c.length)) {
        return;
    }
    const { polyline } = annotation.data.contour;
    const { length } = polyline;
    let distance = Infinity;
    for (let i = 0; i < length; i++) {
        const canvasPoint = viewport.worldToCanvas(polyline[i]);
        const distanceToPoint = math_1.point.distanceToPoint(canvasPoint, coords);
        distance = Math.min(distance, distanceToPoint);
    }
    if (distance === Infinity || isNaN(distance)) {
        return;
    }
    return distance;
};
exports.distancePointToContour = distancePointToContour;
//# sourceMappingURL=distancePointToContour.js.map