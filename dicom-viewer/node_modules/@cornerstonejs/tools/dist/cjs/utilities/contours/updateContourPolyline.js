"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@cornerstonejs/core");
const math = __importStar(require("../math"));
const stateManagement_1 = require("../../stateManagement");
function updateContourPolyline(annotation, polylineData, transforms, options) {
    var _a, _b;
    const { canvasToWorld, worldToCanvas } = transforms;
    const { data } = annotation;
    const { targetWindingDirection } = polylineData;
    let { points: polyline } = polylineData;
    if ((_a = options === null || options === void 0 ? void 0 : options.decimate) === null || _a === void 0 ? void 0 : _a.enabled) {
        polyline = math.polyline.decimate(polylineData.points, (_b = options === null || options === void 0 ? void 0 : options.decimate) === null || _b === void 0 ? void 0 : _b.epsilon);
    }
    let { closed } = polylineData;
    const numPoints = polyline.length;
    const polylineWorldPoints = new Array(numPoints);
    const currentPolylineWindingDirection = math.polyline.getWindingDirection(polyline);
    const parentAnnotation = (0, stateManagement_1.getParentAnnotation)(annotation);
    if (closed === undefined) {
        let currentClosedState = false;
        if (polyline.length > 3) {
            const lastToFirstDist = math.point.distanceToPointSquared(polyline[0], polyline[numPoints - 1]);
            currentClosedState = core_1.utilities.isEqual(0, lastToFirstDist);
        }
        closed = currentClosedState;
    }
    let windingDirection = parentAnnotation
        ? parentAnnotation.data.contour.windingDirection * -1
        : targetWindingDirection;
    if (windingDirection === undefined) {
        windingDirection = currentPolylineWindingDirection;
    }
    if (windingDirection !== currentPolylineWindingDirection) {
        polyline.reverse();
    }
    const handlePoints = data.handles.points.map((p) => worldToCanvas(p));
    if (handlePoints.length > 2) {
        const currentHandlesWindingDirection = math.polyline.getWindingDirection(handlePoints);
        if (currentHandlesWindingDirection !== windingDirection) {
            data.handles.points.reverse();
        }
    }
    for (let i = 0; i < numPoints; i++) {
        polylineWorldPoints[i] = canvasToWorld(polyline[i]);
    }
    data.contour.polyline = polylineWorldPoints;
    data.contour.closed = closed;
    data.contour.windingDirection = windingDirection;
    (0, stateManagement_1.invalidateAnnotation)(annotation);
}
exports.default = updateContourPolyline;
//# sourceMappingURL=updateContourPolyline.js.map