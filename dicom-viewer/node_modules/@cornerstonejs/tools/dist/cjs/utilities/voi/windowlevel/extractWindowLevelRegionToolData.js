"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractWindowLevelRegionToolData = void 0;
const core_1 = require("@cornerstonejs/core");
function extractWindowLevelRegionToolData(viewport) {
    if (viewport instanceof core_1.VolumeViewport) {
        return extractImageDataVolume(viewport);
    }
    if (viewport instanceof core_1.StackViewport) {
        return extractImageDataStack(viewport);
    }
    throw new Error('Viewport not supported');
}
exports.extractWindowLevelRegionToolData = extractWindowLevelRegionToolData;
function extractImageDataVolume(viewport) {
    const { scalarData, width, height } = core_1.utilities.getCurrentVolumeViewportSlice(viewport);
    const { min: minPixelValue, max: maxPixelValue } = core_1.utilities.getMinMax(scalarData);
    const volumeId = viewport.getVolumeId();
    const volume = core_1.cache.getVolume(volumeId);
    const { metadata, cornerstoneImageMetaData } = volume;
    const { Rows: rows, Columns: columns } = metadata;
    const { color } = cornerstoneImageMetaData;
    return {
        scalarData,
        width,
        height,
        minPixelValue,
        maxPixelValue,
        rows,
        columns,
        color,
    };
}
function extractImageDataStack(viewport) {
    const imageData = viewport.getImageData();
    const { scalarData } = imageData;
    const { min: minPixelValue, max: maxPixelValue } = core_1.utilities.getMinMax(scalarData);
    const width = imageData.dimensions[0];
    const height = imageData.dimensions[1];
    const { rows, columns, color } = viewport.getCornerstoneImage();
    return {
        scalarData,
        width,
        height,
        minPixelValue,
        maxPixelValue,
        rows,
        columns,
        color,
    };
}
//# sourceMappingURL=extractWindowLevelRegionToolData.js.map