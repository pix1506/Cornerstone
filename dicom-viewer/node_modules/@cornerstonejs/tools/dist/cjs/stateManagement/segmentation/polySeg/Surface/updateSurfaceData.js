"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateSurfaceData = void 0;
const core_1 = require("@cornerstonejs/core");
const segmentation_1 = require("../../../../utilities/segmentation");
const segmentationState_1 = require("../../segmentationState");
const triggerSegmentationEvents_1 = require("../../triggerSegmentationEvents");
const enums_1 = require("../../../../enums");
const surfaceComputationStrategies_1 = require("./surfaceComputationStrategies");
const createAndCacheSurfacesFromRaw_1 = require("./createAndCacheSurfacesFromRaw");
function updateSurfaceData(segmentationId) {
    return __awaiter(this, void 0, void 0, function* () {
        const surfacesObj = yield (0, surfaceComputationStrategies_1.computeSurfaceFromLabelmapSegmentation)(segmentationId);
        if (!surfacesObj) {
            return;
        }
        const segmentation = (0, segmentationState_1.getSegmentation)(segmentationId);
        const indices = (0, segmentation_1.getUniqueSegmentIndices)(segmentationId);
        if (!indices.length) {
            const geometryIds = segmentation.representationData.SURFACE.geometryIds;
            geometryIds.forEach((geometryId) => {
                const geometry = core_1.cache.getGeometry(geometryId);
                const surface = geometry.data;
                surface.setPoints([]);
                surface.setPolys([]);
            });
            (0, triggerSegmentationEvents_1.triggerSegmentationModified)(segmentationId);
            return;
        }
        const promises = surfacesObj.map(({ data, segmentIndex }) => {
            const geometryId = `segmentation_${segmentationId}_surface_${segmentIndex}`;
            const geometry = core_1.cache.getGeometry(geometryId);
            if (!geometry) {
                const toolGroupIds = (0, segmentationState_1.getToolGroupIdsWithSegmentation)(segmentationId);
                return toolGroupIds.map((toolGroupId) => {
                    const segmentationRepresentations = (0, segmentationState_1.getSegmentationRepresentations)(toolGroupId);
                    return segmentationRepresentations.map((segmentationRepresentation) => {
                        if (segmentationRepresentation.type !==
                            enums_1.SegmentationRepresentations.Surface) {
                            return;
                        }
                        segmentation.representationData.SURFACE.geometryIds.set(segmentIndex, geometryId);
                        return (0, createAndCacheSurfacesFromRaw_1.createAndCacheSurfacesFromRaw)(segmentationId, [{ segmentIndex, data }], {
                            segmentationRepresentationUID: segmentationRepresentation.segmentationRepresentationUID,
                        });
                    });
                });
            }
            else if (indices.includes(segmentIndex)) {
                const surface = geometry.data;
                surface.setPoints(data.points);
                surface.setPolys(data.polys);
            }
            else {
                const surface = geometry.data;
                surface.setPoints([]);
                surface.setPolys([]);
            }
        });
        yield Promise.all(promises);
        (0, triggerSegmentationEvents_1.triggerSegmentationModified)(segmentationId);
    });
}
exports.updateSurfaceData = updateSurfaceData;
//# sourceMappingURL=updateSurfaceData.js.map