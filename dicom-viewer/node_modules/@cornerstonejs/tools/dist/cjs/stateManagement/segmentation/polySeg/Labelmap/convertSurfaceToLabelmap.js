"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertSurfaceToStackLabelmap = exports.convertSurfaceToVolumeLabelmap = void 0;
const core_1 = require("@cornerstonejs/core");
const enums_1 = require("../../../../enums");
const workerManager = (0, core_1.getWebWorkerManager)();
const triggerWorkerProgress = (eventTarget, progress) => {
    (0, core_1.triggerEvent)(eventTarget, core_1.Enums.Events.WEB_WORKER_PROGRESS, {
        progress,
        type: enums_1.WorkerTypes.POLYSEG_SURFACE_TO_LABELMAP,
    });
};
function convertSurfaceToVolumeLabelmap(surfaceRepresentationData, segmentationVolume) {
    return __awaiter(this, void 0, void 0, function* () {
        const { geometryIds } = surfaceRepresentationData;
        if (!(geometryIds === null || geometryIds === void 0 ? void 0 : geometryIds.size)) {
            throw new Error('No geometry IDs found for surface representation');
        }
        const segmentsInfo = new Map();
        geometryIds.forEach((geometryId, segmentIndex) => {
            const geometry = core_1.cache.getGeometry(geometryId);
            const geometryData = geometry.data;
            const points = geometryData.getPoints();
            const polys = geometryData.getPolys();
            segmentsInfo.set(segmentIndex, {
                points,
                polys,
            });
        });
        const { dimensions, direction, origin, spacing } = segmentationVolume;
        triggerWorkerProgress(core_1.eventTarget, 0);
        const newScalarData = yield workerManager.executeTask('polySeg', 'convertSurfacesToVolumeLabelmap', {
            segmentsInfo,
            dimensions,
            spacing,
            direction,
            origin,
        }, {
            callbacks: [
                (progress) => {
                    triggerWorkerProgress(core_1.eventTarget, progress);
                },
            ],
        });
        triggerWorkerProgress(core_1.eventTarget, 1);
        segmentationVolume.imageData
            .getPointData()
            .getScalars()
            .setData(newScalarData);
        segmentationVolume.imageData.modified();
        segmentationVolume.modified();
        return {
            volumeId: segmentationVolume.volumeId,
        };
    });
}
exports.convertSurfaceToVolumeLabelmap = convertSurfaceToVolumeLabelmap;
function convertSurfaceToStackLabelmap() {
    return __awaiter(this, void 0, void 0, function* () {
    });
}
exports.convertSurfaceToStackLabelmap = convertSurfaceToStackLabelmap;
//# sourceMappingURL=convertSurfaceToLabelmap.js.map