"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.computeAndAddRepresentation = void 0;
const core_1 = require("@cornerstonejs/core");
const enums_1 = require("../../../enums");
const addRepresentationData_1 = __importDefault(require("../addRepresentationData"));
const triggerSegmentationEvents_1 = require("../triggerSegmentationEvents");
const utilities_1 = require("../../../utilities");
const registerPolySegWorker_1 = require("./registerPolySegWorker");
const computedRepresentations = new Map();
function computeAndAddRepresentation(segmentationId, representationType, computeFunction, updateFunction) {
    return __awaiter(this, void 0, void 0, function* () {
        (0, registerPolySegWorker_1.registerPolySegWorker)();
        const data = yield computeFunction();
        (0, addRepresentationData_1.default)({
            segmentationId,
            type: representationType,
            data,
        });
        if (!computedRepresentations.has(segmentationId)) {
            computedRepresentations.set(segmentationId, []);
        }
        const representations = computedRepresentations.get(segmentationId);
        if (!representations.includes(representationType)) {
            representations.push(representationType);
        }
        subscribeToSegmentationChanges(updateFunction);
        (0, triggerSegmentationEvents_1.triggerSegmentationModified)(segmentationId);
        return data;
    });
}
exports.computeAndAddRepresentation = computeAndAddRepresentation;
function subscribeToSegmentationChanges(updateFunction) {
    const debouncedUpdateFunction = (event) => {
        _debouncedSegmentationModified(event, updateFunction);
    };
    updateFunction._debouncedUpdateFunction = debouncedUpdateFunction;
    core_1.eventTarget.removeEventListener(enums_1.Events.SEGMENTATION_DATA_MODIFIED, updateFunction._debouncedUpdateFunction);
    core_1.eventTarget.addEventListener(enums_1.Events.SEGMENTATION_DATA_MODIFIED, updateFunction._debouncedUpdateFunction);
}
const _debouncedSegmentationModified = (0, utilities_1.debounce)((event, updateFunction) => {
    const segmentationId = event.detail.segmentationId;
    const representations = computedRepresentations.get(segmentationId);
    if (!representations || !representations.length) {
        return;
    }
    updateFunction(segmentationId);
    if (representations.length) {
        (0, triggerSegmentationEvents_1.triggerSegmentationModified)(segmentationId);
    }
}, 300);
//# sourceMappingURL=computeAndAddRepresentation.js.map